<?php

/**
 * @file
 * Angular API module file.
 */

/**
 * Implements hook_permission().
 */
function angular_api_permission() {
  return array(
    'administer angularjs api' => array(
      'title' => t('Administer AngularJS API Settings'),
      'description' => t('Allow to configure global AngularJS settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function angular_api_menu() {
  $items = array();
  $items['admin/config/development/angularjs_api'] = array(
    'title' => 'AngularJS API',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'angular_api_settings_form',
    ),
    'file' => 'angular_api.admin.inc',
    'file path' => drupal_get_path('module', 'angular_api') . '/includes',
    'access arguments' => array(
      'administer angularjs api',
    ),
    'description' => 'Configure AngularJS API and related settings.',
  );
  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function angular_api_libraries_info() {
  $base_file = array(
    'name' => 'AngularJS',
    'vendor url' => 'https://angularjs.org/',
    'download url' => 'https://angularjs.org/',
    'version arguments' => array(
      'file' => 'angular.js',
      'pattern' => '/v(\d\.\d)/i',
    ),
  );
  $base_cdn_file = array(
    'name' => 'AngularJS',
    'vendor url' => 'https://angularjs.org/',
    'download url' => 'https://angularjs.org/',
    'version callback' => 'angular_api_get_cdn_version',
    'version arguments' => array(
      'file' => 'angular.js',
      'pattern' => '/v(\d\.\d)/i',
    ),
    'callbacks' => array(
      'pre-load' => array('angular_api_cdn_libraries_preload'),
    ),
  );
  $versions = array(
    '1.0' => '1.0.x',
    '1.1' => '1.1.x',
    '1.2' => '1.2.x',
    '1.3' => '1.3.x',
  );

  // Identify the paths for the versions.
  $installed_versions = angular_api_check_version('all');
  $installed_versions = array_flip($installed_versions);
  $all_angular_files = angular_api_get_additional_files();
  $compression_type = variable_get('angular_api_compression_type', 'minified');
  $selected_version = variable_get('angular_api_version', 'none');

  $use_cdn = variable_get('angular_api_cdn', '0');
  if ($use_cdn == '0') {
    // Case when we don't use the CDN.
    foreach ($versions as $version => $version_label) {
      // Do the angular library first.
      $libraries['angular.js']['versions'][$version_label] = array(
        'library path' => isset($installed_versions[$version]) ? $installed_versions[$version] : libraries_get_path('angularjs'),
        'files' => array(
          'js' => array(
            'angular.js' => array('type' => 'external'),
          ),
        ),
      );
      $libraries['angular.js']['versions'][$version_label]['variants']['minified'] = array(
        'files' => array('js' => array('angular.min.js' => array())),
      );
      $libraries['angular.js']['versions'][$version_label]['variants']['source'] = array(
        'files' => array('js' => array('angular.js' => array())),
      );

      // And all of the rest files later.
      foreach ($all_angular_files[$version] as $angular_file => $angular_file_label) {
        $libraries[$angular_file . '.js']['versions'][$version_label] = array(
          'library path' => isset($installed_versions[$version]) ? $installed_versions[$version] : libraries_get_path('angularjs'),
          'files' => array(
            'js' => array(
              $angular_file . '.js' => array(),
            ),
          ),
          'dependencies' => array('angular.js (' . $version_label . ')'),
        );
        $libraries[$angular_file . '.js']['versions'][$version_label]['variants']['minified'] = array(
          'files' => array('js' => array($angular_file . '.min.js' => array())),
        );
        $libraries[$angular_file . '.js']['versions'][$version_label]['variants']['source'] = array(
          'files' => array('js' => array($angular_file . '.js' => array())),
        );
        $libraries[$angular_file . '.js']['name'] = 'AngularJS: ' . $angular_file_label;
        $libraries[$angular_file . '.js']['dependencies'] = array('angular.js');
        $libraries[$angular_file . '.js'] += $base_file;

        if ($version == $selected_version) {
          $libraries[$angular_file . '.js']['files'] = $libraries[$angular_file . '.js']['versions'][$version_label]['variants'][$compression_type]['files'];
        }
      }
    }

    // Put the base in.
    $libraries['angular.js'] += $base_file;
  }
  else {
    // Case when we use the CDN.
    $cdn_source = variable_get('angular_api_cdn_source', 'google');

    $google_cdn_base = 'https://ajax.googleapis.com/ajax/libs/angularjs';
    $cdnjs_cdn_base = 'https://cdnjs.cloudflare.com/ajax/libs/angular.js';

    // Pick our CDN source.
    $cdn_base = ($cdn_source == 'google') ? $google_cdn_base : $cdnjs_cdn_base;

    $libraries['angular.js'] = array(
      'versions' => array(
        '1.0.x' => array(
          'raw path' => $cdn_base . '/1.0.8',
          'files' => array(
            'js' => array(
              'angular.js' => array('type' => 'external'),
            ),
          ),
        ),
        '1.1.x' => array(
          'raw path' => $cdn_base . '1.1.5',
          'files' => array(
            'js' => array(
              'angular.js' => array('type' => 'external'),
            ),
          ),
        ),
        '1.2.x' => array(
          'raw path' => $cdn_base . (($cdn_source == 'google') ? '/1.2.27' : '/1.2.0rc3'),
          'files' => array(
            'js' => array(
              'angular.js' => array('type' => 'external'),
            ),
          ),
        ),
        '1.3.x' => array(
          'raw path' => $cdn_base . '/1.3.3',
          'files' => array(
            'js' => array(
              'angular.js' => array('type' => 'external'),
            ),
          ),
        ),
      ),
    );

    // Specify correct variants.
    foreach ($libraries['angular.js']['versions'] as $version => $version_value) {
      $libraries['angular.js']['versions'][$version]['variants']['minified'] = array(
        'files' => array('js' => array('angular.min.js' => array('type' => 'external'))),
      );
      $libraries['angular.js']['versions'][$version]['variants']['source'] = array(
        'files' => array('js' => array('angular.js' => array('type' => 'external'))),
      );
    }

    foreach ($versions as $version => $version_label) {
      // And all of the rest files later.
      $raw_cdn_path = $libraries['angular.js']['versions'][$version_label]['raw path'];

      foreach ($all_angular_files[$version] as $angular_file => $angular_file_label) {
        $libraries[$angular_file . '.js']['versions'][$version_label] = array(
          'files' => array(
            'js' => array(
              $angular_file . '.js' => array('type' => 'external'),
            ),
          ),
          'dependencies' => array('angular.js (' . $version_label . ')'),
        );
        $libraries[$angular_file . '.js']['versions'][$version_label]['variants']['minified'] = array(
          'files' => array('js' => array($angular_file . '.min.js' => array('type' => 'external'))),
        );
        $libraries[$angular_file . '.js']['versions'][$version_label]['variants']['source'] = array(
          'files' => array('js' => array($angular_file . '.js' => array('type' => 'external'))),
        );
        $libraries[$angular_file . '.js']['name'] = 'AngularJS: ' . $angular_file_label;
        $libraries[$angular_file . '.js']['dependencies'] = array('angular.js');
        $libraries[$angular_file . '.js'] += $base_cdn_file;

        if ($version == $selected_version) {
          $libraries[$angular_file . '.js']['files'] = $libraries[$angular_file . '.js']['versions'][$version_label]['variants'][$compression_type]['files'];
          $libraries[$angular_file . '.js']['library path'] = drupal_get_path('module', 'angular_api');
          $libraries[$angular_file . '.js']['raw path'] = $raw_cdn_path;
          $libraries[$angular_file . '.js']['version arguments']['file'] = $raw_cdn_path . '/' . $angular_file . '.js';
        }
      }
    }

    // Put the base in.
    $libraries['angular.js'] += $base_cdn_file;
  }

  // Because libraries works this way, we need a default version to specify at the top-level.
  if ($selected_version !== 'none') {

    if (!$use_cdn) {
      // Now adjust the default top-level files.
      $libraries['angular.js']['files'] = $libraries['angular.js']['versions'][$versions[$selected_version]]['variants'][$compression_type]['files'];
      $libraries['angular.js']['library path'] = $libraries['angular.js']['versions'][$versions[$selected_version]]['library path'];
    }
    else {
      $libraries['angular.js']['files'] = $libraries['angular.js']['versions'][$versions[$selected_version]]['variants'][$compression_type]['files'];
      $libraries['angular.js']['library path'] = drupal_get_path('module', 'angular_api');
      $libraries['angular.js']['raw path'] = $libraries['angular.js']['versions'][$versions[$selected_version]]['raw path'];
      $libraries['angular.js']['version arguments']['file'] = $libraries['angular.js']['versions'][$versions[$selected_version]]['raw path'] . '/angular.js';
    }

  }
  return $libraries;
}

/**
 * Checks if the current version exists in the library folder.
 */
function angular_api_check_version($version = 'all') {
  $all_libs = libraries_get_libraries();
  if (!empty($all_libs)) {
    $angular_folders = preg_grep('/(angular)/', $all_libs);
    $found_versions = array();
    foreach ($angular_folders as $folder => $path) {
      $library = array('library path' => $path);
      $options = array(
        'file' => 'angular.js',
        'pattern' => '/v(\d\.\d)/i',
      );
      $found_versions[$path] = libraries_get_version($library, $options);
    }
    if ($version !== 'all') {
      $found = in_array($version, $found_versions);
      if ($found) {
        return TRUE;
      }
    }
    else {
      return $found_versions;
    }
  }
  return FALSE;
}

/**
 * Implements hook_page_build().
 */
function angular_api_page_build(&$page) {
  // Caching the values so we won't make 4 calls on every page-load,
  // Anyway, when someone saves the admin form, we explicitly flush-cache.
  $angular_api_values = cache_get('angular_api_values');
  if (!$angular_api_values) {
    $angular_api_values = array(
      'angular_load_type' => variable_get('angular_api_load_type', 'manual'),
      'used_version' => variable_get('angular_api_version', 'none'),
      'angular_api_autoload_path' => variable_get('angular_api_autoload_path', ''),
      'files_to_load' => variable_get('angular_api_autoload_files', array()),
    );
    cache_set('angular_api_values', (object) $angular_api_values);
  }
  $angular_api_values = isset($angular_api_values->data) ? $angular_api_values->data : (object) $angular_api_values;

  if ($angular_api_values->used_version !== 'none') {
    if ($angular_api_values->angular_load_type !== 'manual') {
      // By default, let's load all the stuff, only in case of path, check the paths.
      $to_load = TRUE;
      if ($angular_api_values->angular_load_type == 'path') {
        $menu_item = menu_get_item();
        $paths = list_extract_allowed_values($angular_api_values->angular_api_autoload_path, 'list_number', TRUE);
        foreach ($paths as $key => $path) {
          $match = drupal_match_path($menu_item['href'], $path);
          $to_load = $match;
        }
      }
      // So, now let's finally load all the stuff.
      if ($to_load) {
        // Prepend the default library.
        $files_to_load = array('angular' => 'angular') + $angular_api_values->files_to_load;
        foreach ($files_to_load as $file => $should_load) {
          if ($should_load) {
            $library = libraries_load($file . '.js');
          }
        }
      }
    }
  }
}

/**
 * Version callback that returns the version of the CDN library.
 */
function angular_api_get_cdn_version($library, $options) {
  // Provide defaults.
  $options += array(
    'file' => '',
    'pattern' => '',
    'lines' => 20,
    'cols' => 200,
  );
  $file = $options['file'];
  $file_headers = @get_headers($file);
  if ($file_headers[0] == 'HTTP/1.1 404 Not Found') {
    $exists = FALSE;
  }
  else {
    $exists = TRUE;
  }

  if (empty($options['file']) || !$exists) {
    return;
  }

  $file = fopen($file, 'r');
  while ($options['lines'] && $line = fgets($file, $options['cols'])) {
    if (preg_match($options['pattern'], $line, $version)) {
      fclose($file);
      return $version[1];
    }
    $options['lines']--;
  }
  fclose($file);
}

/**
 * Helper function that returns all files and their labels for certain library version.
 */
function angular_api_get_additional_files($version = 'all') {
  $files = array();
  $files['1.0'] = array(
    'angular-bootstrap-prettify' => t('Bootstrap Prettify (angular-bootstrap-prettify.js)'),
    'angular-bootstrap' => t('Bootstrap (angular-bootstrap.js)'),
    'angular-cookies' => t('Cookies (angular-cookies.js)'),
    'angular-loader' => t('Loader (angular-loader.js)'),
    'angular-mocks' => t('Mocks (angular-mocks.js)'),
    'angular-resource' => t('Resource (angular-resource.js)'),
    'angular-sanitize' => t('Sanitize (angular-sanitize.js)'),
  );
  $files['1.1'] = array(
    'angular-cookies' => t('Cookies (angular-cookies.js)'),
    'angular-loader' => t('Loader (angular-loader.js)'),
    'angular-mobile' => t('Mobile (angular-mobile.js)'),
    'angular-mocks' => t('Mocks (angular-mocks.js)'),
    'angular-resource' => t('Resource (angular-resource.js)'),
    'angular-sanitize' => t('Sanitize (angular-sanitize.js)'),
  );
  $files['1.2'] = array(
    'angular-animate' => t('Animate (angular-animate.js)'),
    'angular-cookies' => t('Cookies (angular-cookies.js)'),
    'angular-loader' => t('Loader (angular-loader.js)'),
    'angular-mocks' => t('Mocks (angular-mocks.js)'),
    'angular-resource' => t('Resource (angular-resource.js)'),
    'angular-route' => t('Route (angular-route.js)'),
    'angular-sanitize' => t('Sanitize (angular-sanitize.js)'),
    'angular-touch' => t('Touch (angular-touch.js)'),
  );
  $files['1.3'] = array(
    'angular-animate' => t('Animate (angular-animate.js)'),
    'angular-aria' => t('Aria (angular-aria.js)'),
    'angular-cookies' => t('Cookies (angular-cookies.js)'),
    'angular-loader' => t('Loader (angular-loader.js)'),
    'angular-messages' => t('Messages (angular-messages.js)'),
    'angular-mocks' => t('Mocks (angular-mocks.js)'),
    'angular-resource' => t('Resource (angular-resource.js)'),
    'angular-route' => t('Route (angular-route.js)'),
    'angular-sanitize' => t('Sanitize (angular-sanitize.js)'),
    'angular-scenario' => t('Scenario (angular-scenario.js)'),
    'angular-touch' => t('Touch (angular-touch.js)'),
  );
  return ($version !== 'all') ? $files[$version] : $files;
}

/**
 * Callback function used in hook_libraries_info().
 */
function angular_api_cdn_libraries_preload(&$library) {
  $library['library path'] = $library['raw path'];
}
